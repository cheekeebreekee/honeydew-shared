schema {
  query: Query
  mutation: Mutation
}

type Query {
  getMyProfile: MyProfile!
  getMyAppointments(limit: Int, nextToken: String): AppointmentPage!
  getPatient(patientId: String): Patient! # probably we will need separate method for getting full patient info (appointments, followups etc.)
  getPatients(limit: Int!, nextToken: String): PatientPage!
}

type Mutation {
  createAppointment(newAppointment: AppointmentInput!): Appointment!
  addAppointmentStatus(appointmentStatus: AppointmentStatusInput!): Appointment!
  createNote(newNote: NoteInput!): Note!
  archivePatient(patientId: String!): Patient!
  deletePatient(patientId: String!): Patient!
  createPatient(patient: PatientInput): Patient!
  #changeContactedFlag --> will be probably generalized to setFlag
  #markAsFirstLogin --> will be probably generalized to setFlag
  #markAsNotifiedAboutFillMedBackground --> will be probably generalized to setFlag
  #markAsNotifiedAboutUpcomingFollowUp --> will be probably generalized to setFlag
  #markAsPinned --> will be probably generalized to setFlag
  #markAsRewardedForReferral --> will be probably generalized to setFlag
  #markLastTreatmentPlanAsRead --> will be probably generalized to setFlag
  #setCardSavedFlag --> will be probably generalized to setFlag
  #reassignEmployees --> will be a part of employee-service
  #has - TODO ???
  setFlag(patientId: String, flag: String, value: Boolean): Patient!
  setMeetingLink(patientId: String, meetingLink: String): Patient!
  setTreatmentPlan(followUpId: String, treatmentPlan: TreatmentPlanInput): TreatmentPlan!
  #updateChatInitTime --> need to think what to do with it
  #updateChatTime --> need to think what to do with it
  updateInsuranceInfo(patientId: String, insuranceInfo: PatientInsuranceInfoInput): Patient!
  updateMedicalBackgroundInfo(
    patientId: String
    medicalBackgroundInfo: PatientMedicalBackgroundInput
  ): Patient!
  #updateMembershipNotificationStatus --> need to think what to do with it
  #updateMultiAccList --> probably will be deprecated and moved to account service
  updateName(patientId: String, name: String): Patient!
  #updateNoShowStatus --> will be probably generalized to setFlag
  #updateParams --> probably will be generalized to updateMedicalBackgroundInfo
  updatePaymentInfo(accountId: String, paymentInfo: PaymentInfoInput): Patient!
  updateShippingInfo(patientId: String, shippingInfo: ShippingInfoInput): Patient!
  #updateUpcomingAppointmentNotificationStatus - TODO
  #updateWithSkinSurveyAnswers - TODO
  #upsertWithCalendlyData - TODO
}

input NoteCreatedByInput {
  id: String!
  role: String!
}

input NoteInput {
  id: ID!
  createdAt: AWSDateTime!
  createdBy: NoteCreatedByInput!
  text: String!
  type: String!
}

input TreatmentPlanInput {
  instructions: String
  medicineKey: String
  refillExpirationDate: String
  refillsCount: String
  specialInstructions: String
}

input PaymentInput {
  id: String!
  currency: String
  amount: Float
  createdAt: AWSDateTime
}

input AppointmentInput {
  patientId: ID!
  appointmentId: ID!
  createdAt: String!
  startTime: String!
  endTime: String!
  status: String
  cancelReason: String
}

input PaymentInfoInput {
  cardSaved: String
  payment: PaymentInput
}

input AppointmentStatusInput {
  appointmentId: ID!
  status: String!
  cancelReason: String
}

input PatientMedicalBackgroundInput {
  sex: String
  height: String
  weight: String
  dateOfBirth: String
  zipCode: String
  skinSurvey: [PatientMedicalBackgroundSkinSurveyInput]
}

input PatientMedicalBackgroundSkinSurveyInput {
  id: String
  answer: String
}

input ShippingInfoInput {
  city: String
  state: String
  zipCode: String
  firstName: String
  lastName: String
  addressLine1: String
  addressLine2: String
}

input PatientInsuranceInfoInput {
  insuranceName: String
  policyHolderName: String
  groupNumber: String
  memberId: String
}

input PatientInput {
  id: ID!
  accountId: ID!
  appointmentId: ID!
  phone: String
  email: String
  referralId: String
  careTeam: [PatientCareTeamInput]
  parentInfo: PatientParentInfoInput
  medicalBackground: PatientMedicalBackgroundInput
  shippingInfo: ShippingInfoInput
  insurance: PatientInsuranceInfoInput
  timezone: String
  membership: PatientMembershipInput
  scheduleLink: String
  isAccutane: Boolean! # consider to move to flags
  # flags(contains flags for different purposes)
}

input PatientCareTeamInput {
  id: String
  role: String
}

input PatientMembershipInput {
  type: String
  notificationLevel: Int
  isActive: Boolean!
  createdAt: AWSDateTime
}

input PatientParentInfoInput {
  email: String
  phone: String
  name: String
}

type MyProfile {
  name: String
}

type NoteCreatedBy {
  id: String!
  role: String!
}

type Appointment {
  patientId: ID! #HASH
  appointmentId: ID! #RANGE
  createdAt: AWSDateTime!
  startTime: AWSDateTime!
  endTime: AWSDateTime!
  status: String
  cancelReason: String
}

type SkinImage {
  id: String!
  tag: String!
  label: String!
  fileName: String!
}

type FollowUpQuestionarie {
  id: String!
  answer: String
}

type FollowUpHistory {
  id: String!
  role: String
  action: String
  createdAt: String
}

type TreatmentPlan {
  instructions: String
  medicineKey: String
  refillExpirationDate: String
  refillsCount: String
  specialInstructions: String
}

type FollowUp {
  patientId: ID! #HASH
  followUpId: ID! #RANGE
  providerId: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  skinImages: [SkinImage]
  followUpQuestionarie: [FollowUpQuestionarie]
  nextFollowUpDate: AWSDateTime!
  message: String!
  history: [FollowUpHistory]
  treatmentPlans: [TreatmentPlan]
}

type FollowUpPage {
  followUps: [FollowUp!]
  nextToken: String
}

type Payment {
  id: String!
  currency: String
  amount: Float
  createdAt: AWSDateTime
}

type PaymentInfo {
  cardSaved: String
  payments: [Payment]
}

type AccountPatient {
  id: String!
}

type Account {
  id: ID!
  customerId: String!
  conversationId: String!
  email: String
  paymentInfo: PaymentInfo
  patients: [AccountPatient]
  chatInfo: String #TODO
}

type Note {
  id: ID! #(key - patientId#uuid)
  createdAt: AWSDateTime!
  createdBy: NoteCreatedBy!
  text: String
  type: String
}

type PatientCareTeam {
  id: String
  role: String
}

type PatientParentInfo {
  email: String
  phone: String
  name: String
}

type PatientMedicalBackgroundSkinSurvey {
  id: String
  answer: String
}

type PatientMedicalBackground {
  sex: String
  height: String
  weight: String
  dateOfBirth: String
  zipCode: String
  skinSurvey: [PatientMedicalBackgroundSkinSurvey]
}

type ShippingInfo {
  city: String
  state: String
  zipCode: String
  addressLine1: String
  addressLine2: String
}

type PatientMembership {
  type: String
  notificationLevel: Int
  isActive: Boolean!
  createdAt: AWSDateTime
}

type PatientInsuranceInfo {
  insuranceName: String
  policyHolderName: String
  groupNumber: String
  memberId: String
}

type Patient {
  id: ID!
  accountId: ID!
  appointmentId: ID!
  phone: String
  email: String
  referralId: String
  careTeam: [PatientCareTeam]
  parentInfo: PatientParentInfo
  medicalBackground: PatientMedicalBackground
  shippingInfo: ShippingInfo
  insurance: PatientInsuranceInfo
  timezone: String
  membership: PatientMembership
  scheduleLink: String
  isAccutane: Boolean! # consider to move to flags
  # flags(contains flags for different purposes)
}

type PatientPage {
  patients: [Patient!]
  nextToken: String
}

type AppointmentPage {
  appointments: [Appointment!]
  nextToken: String
}
